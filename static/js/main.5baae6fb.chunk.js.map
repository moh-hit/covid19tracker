{"version":3,"sources":["api/index.js","components/Cards/Cards.jsx","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js"],"names":["url","fetchData","country","a","newUrl","Axios","get","data","confirmed","recovered","deaths","lastUpdate","fetchDailyData","modifiedData","map","dailydata","total","date","reportDate","fetchCountries","countries","name","Cards","Grid","container","spacing","justify","item","component","Card","xs","md","className","CardContent","Typography","gutterBottom","variant","start","end","value","duration","separator","color","Date","toDateString","Chart","useState","dailyData","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","CountryPicker","hanldeCountryChange","countryData","fetchedCountries","setFetchedCountries","onChange","e","target","i","key","App","fetchedData","setState","state","countryDatq","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5baae6fb.chunk.js","sourcesContent":["import Axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\"\r\n\r\nexport const fetchData = async (country) => {\r\n    try {\r\n        let newUrl = url\r\n        if (country) {\r\n            newUrl = `${url}/countries/${country}`\r\n        }\r\n\r\n        const { data: { confirmed, recovered, deaths, lastUpdate }} = await Axios.get(newUrl)\r\n        return { confirmed, recovered, deaths, lastUpdate }\r\n    } catch (err) {\r\n        throw err;\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await Axios.get(`${url}/daily`)\r\n\r\n        const modifiedData = data.map((dailydata) => ({\r\n            confirmed: dailydata.confirmed.total,\r\n            deaths: dailydata.deaths.total,\r\n            date: dailydata.reportDate\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (err) {\r\n        throw err;\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data: { countries }} = await Axios.get(`${url}/countries`)\r\n\r\n        return countries.map( (country) => country.name )\r\n    } catch (err) {\r\n        throw err;\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Countup from \"react-countup\"\r\n\r\nimport {Card, CardContent, Typography, Grid} from \"@material-ui/core\"\r\n\r\n\r\nconst Cards = ({data: { confirmed, recovered, deaths, lastUpdate }}) => {\r\n    if(!confirmed) {\r\n        return 'loading...'\r\n    }\r\n    return (\r\n        <div>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className=\"grid infected\">\r\n                    <CardContent>\r\n                        <Typography className=\"text-primary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <Countup \r\n                                start={0} \r\n                                end={confirmed.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" gutterBottom>{ new Date(lastUpdate).toDateString() }</Typography>\r\n                        <Typography variant=\"body2\" className=\"text-dark text-capitalize\">number of active cases from covid19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className=\"grid recovered\">\r\n                    <CardContent>\r\n                        <Typography className=\"text-success\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <Countup \r\n                                start={0} \r\n                                end={ recovered.value }\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" gutterBottom>{ new Date(lastUpdate).toDateString() }</Typography>\r\n                        <Typography variant=\"body2\" className=\"text-dark text-capitalize\">number of Recovered cases from covid19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className=\"grid deaths\">\r\n                    <CardContent>\r\n                        <Typography className=\"text-danger\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <Countup \r\n                                start={0} \r\n                                end={ deaths.value }\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" gutterBottom>{ new Date(lastUpdate).toDateString() }</Typography>\r\n                        <Typography variant=\"body2\" className=\"text-dark text-capitalize\">number of Deaths from covid19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards","import React, { useState, useEffect } from 'react'\r\nimport { fetchDailyData } from \"../../api\"\r\nimport { Line, Bar } from \"react-chartjs-2\"\r\n\r\nconst Chart = () => {\r\n\r\n    const [ dailyData, setDailyData ] = useState([])\r\n\r\n    useEffect(() => {\r\n        const fetchApi = async () => {\r\n            setDailyData( await fetchDailyData() );\r\n        }\r\n\r\n        fetchApi();\r\n    });\r\n\r\n    const lineChart = (\r\n        dailyData.length\r\n        ?\r\n        (\r\n        <Line \r\n            data={{\r\n                labels: dailyData.map(( { date }) => date ),\r\n                datasets: [{\r\n                    data: dailyData.map(( { confirmed }) => confirmed ),\r\n                    label: 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill: true\r\n                }, {\r\n                    data: dailyData.map(( { deaths }) => deaths ),\r\n                    label: 'Deaths',\r\n                    borderColor: 'red',\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                    fill: true\r\n                }]\r\n            }}\r\n        />)\r\n        :\r\n        null\r\n    )\r\n    return (\r\n        <div className=\"container\">\r\n            { lineChart }            \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Chart","import React, { useState, useEffect } from 'react'\r\nimport { fetchCountries } from \"../../api\"\r\n\r\nconst CountryPicker = ( { hanldeCountryChange, countryData } ) => {\r\n    const [ fetchedCountries, setFetchedCountries ] = useState([])\r\n\r\n    useEffect(() => {\r\n        const fetchApi = async () => {\r\n            setFetchedCountries( await fetchCountries() ) \r\n        }\r\n\r\n        fetchApi();\r\n    }, [setFetchedCountries]);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <form>\r\n                <div className=\"form-group\">\r\n                    <select className=\"form-control\" onChange={(e) => hanldeCountryChange(e.target.value) } >\r\n                        <option>-- Select Country --</option>\r\n                        {fetchedCountries.map( (country, i) => <option key={i} value={country}>{country}</option> )}\r\n                    </select>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountryPicker\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport { fetchData } from \"./api\"\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nimport { Cards, Chart, CountryPicker } from './components'\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      data: {},\r\n      countryDatq: {}\r\n    }\r\n  }\r\n\r\n  async componentDidMount(){\r\n    const fetchedData = await fetchData()\r\n\r\n    this.setState({\r\n      data: fetchedData\r\n    })\r\n  }\r\n\r\n  hanldeCountryChange = async (country) => {\r\n    const fetchedData = await fetchData(country)\r\n    // console.log(fetchedData)\r\n    this.setState({\r\n      data: fetchedData\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { data } = this.state\r\n    return (\r\n      <div className=\"container\">\r\n        <Cards data = {data} />\r\n        <CountryPicker hanldeCountryChange = {this.hanldeCountryChange} />\r\n        <Chart />      \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}